!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	Benchmarks.h	/^	int64_t A ;$/;"	m	class:Benchmarks	access:protected
Benchmarks	Benchmarks.cpp	/^Benchmarks::Benchmarks(RunParameter runParam){$/;"	f	class:Benchmarks	signature:(RunParameter runParam)
Benchmarks	Benchmarks.h	/^	Benchmarks(RunParameter runParam);$/;"	p	class:Benchmarks	access:public	signature:(RunParameter runParam)
Benchmarks	Benchmarks.h	/^class Benchmarks{$/;"	c
Benchmarks::A	Benchmarks.h	/^	int64_t A ;$/;"	m	class:Benchmarks	access:protected
Benchmarks::Benchmarks	Benchmarks.cpp	/^Benchmarks::Benchmarks(RunParameter runParam){$/;"	f	class:Benchmarks	signature:(RunParameter runParam)
Benchmarks::Benchmarks	Benchmarks.h	/^	Benchmarks(RunParameter runParam);$/;"	p	class:Benchmarks	access:public	signature:(RunParameter runParam)
Benchmarks::M	Benchmarks.h	/^	int64_t M ;$/;"	m	class:Benchmarks	access:protected
Benchmarks::MASK	Benchmarks.h	/^	int64_t MASK;$/;"	m	class:Benchmarks	access:protected
Benchmarks::Ovector	Benchmarks.h	/^	double *Ovector;$/;"	m	class:Benchmarks	access:protected
Benchmarks::Pvector	Benchmarks.h	/^	int*    Pvector;$/;"	m	class:Benchmarks	access:protected
Benchmarks::RotMatrix	Benchmarks.h	/^	double* RotMatrix;$/;"	m	class:Benchmarks	access:protected
Benchmarks::ackley	Benchmarks.cpp	/^double Benchmarks::ackley(double *x, int dim, int k)$/;"	f	class:Benchmarks	signature:(double *x, int dim, int k)
Benchmarks::ackley	Benchmarks.cpp	/^double Benchmarks::ackley(double*x,int dim){$/;"	f	class:Benchmarks	signature:(double*x,int dim)
Benchmarks::ackley	Benchmarks.h	/^	double ackley(double*x,int dim);$/;"	p	class:Benchmarks	access:protected	signature:(double*x,int dim)
Benchmarks::ackley	Benchmarks.h	/^	double ackley(double*x,int dim, int k);$/;"	p	class:Benchmarks	access:protected	signature:(double*x,int dim, int k)
Benchmarks::anotherz	Benchmarks.h	/^	double* anotherz;$/;"	m	class:Benchmarks	access:protected
Benchmarks::anotherz1	Benchmarks.h	/^	double* anotherz1;$/;"	m	class:Benchmarks	access:protected
Benchmarks::anotherz2	Benchmarks.h	/^	double* anotherz2;$/;"	m	class:Benchmarks	access:protected
Benchmarks::compute	Benchmarks.h	/^	virtual double compute(double* x){return 0;};$/;"	f	class:Benchmarks	access:public	signature:(double* x)
Benchmarks::createPermVector	Benchmarks.cpp	/^int* Benchmarks::createPermVector(int dim){$/;"	f	class:Benchmarks	signature:(int dim)
Benchmarks::createPermVector	Benchmarks.h	/^	int* createPermVector(int dim);$/;"	p	class:Benchmarks	access:protected	signature:(int dim)
Benchmarks::createRotMatrix	Benchmarks.cpp	/^double** Benchmarks::createRotMatrix(int dim){$/;"	f	class:Benchmarks	signature:(int dim)
Benchmarks::createRotMatrix	Benchmarks.h	/^	double** createRotMatrix(int dim);$/;"	p	class:Benchmarks	access:protected	signature:(int dim)
Benchmarks::createRotMatrix1D	Benchmarks.cpp	/^double* Benchmarks::createRotMatrix1D(int dim){$/;"	f	class:Benchmarks	signature:(int dim)
Benchmarks::createRotMatrix1D	Benchmarks.h	/^	double* createRotMatrix1D(int dim);$/;"	p	class:Benchmarks	access:protected	signature:(int dim)
Benchmarks::createShiftVector	Benchmarks.cpp	/^double* Benchmarks::createShiftVector(int dim, double min,double max) {$/;"	f	class:Benchmarks	signature:(int dim, double min,double max)
Benchmarks::createShiftVector	Benchmarks.h	/^	double* createShiftVector(int dim, double min,double max);$/;"	p	class:Benchmarks	access:protected	signature:(int dim, double min,double max)
Benchmarks::dimension	Benchmarks.h	/^	int dimension;$/;"	m	class:Benchmarks	access:protected
Benchmarks::elliptic	Benchmarks.cpp	/^double Benchmarks::elliptic(double*x, int dim, int k) {$/;"	f	class:Benchmarks	signature:(double*x, int dim, int k)
Benchmarks::elliptic	Benchmarks.cpp	/^double Benchmarks::elliptic(double*x,int dim) {$/;"	f	class:Benchmarks	signature:(double*x,int dim)
Benchmarks::elliptic	Benchmarks.h	/^	double elliptic(double*x, int dim, int k);$/;"	p	class:Benchmarks	access:protected	signature:(double*x, int dim, int k)
Benchmarks::elliptic	Benchmarks.h	/^	double elliptic(double*x,int dim);$/;"	p	class:Benchmarks	access:protected	signature:(double*x,int dim)
Benchmarks::functionInitRandomSeed	Benchmarks.h	/^	int64_t functionInitRandomSeed;$/;"	m	class:Benchmarks	access:protected
Benchmarks::lookupprepare	Benchmarks.cpp	/^double* Benchmarks::lookupprepare(int dim) {$/;"	f	class:Benchmarks	signature:(int dim)
Benchmarks::lookupprepare	Benchmarks.h	/^	double* lookupprepare(int dim);$/;"	p	class:Benchmarks	access:protected	signature:(int dim)
Benchmarks::m_havenextGaussian	Benchmarks.h	/^	bool  m_havenextGaussian;$/;"	m	class:Benchmarks	access:protected
Benchmarks::m_nextGaussian	Benchmarks.h	/^	double m_nextGaussian;$/;"	m	class:Benchmarks	access:protected
Benchmarks::m_seed	Benchmarks.h	/^	int64_t m_seed;$/;"	m	class:Benchmarks	access:protected
Benchmarks::multiply	Benchmarks.cpp	/^double* Benchmarks::multiply(double*vector, double*matrix,int dim){$/;"	f	class:Benchmarks	signature:(double*vector, double*matrix,int dim)
Benchmarks::multiply	Benchmarks.h	/^	double* multiply(double*vector, double*matrix,int dim);$/;"	p	class:Benchmarks	access:protected	signature:(double*vector, double*matrix,int dim)
Benchmarks::next	Benchmarks.cpp	/^int Benchmarks::next(int bits) {$/;"	f	class:Benchmarks	signature:(int bits)
Benchmarks::next	Benchmarks.h	/^	int next(int bits);$/;"	p	class:Benchmarks	access:protected	signature:(int bits)
Benchmarks::nextDouble	Benchmarks.cpp	/^double Benchmarks::nextDouble(){$/;"	f	class:Benchmarks	signature:()
Benchmarks::nextDouble	Benchmarks.h	/^	double nextDouble();$/;"	p	class:Benchmarks	access:protected	signature:()
Benchmarks::nextGaussian	Benchmarks.cpp	/^double Benchmarks::nextGaussian(){$/;"	f	class:Benchmarks	signature:()
Benchmarks::nextGaussian	Benchmarks.h	/^	double nextGaussian();$/;"	p	class:Benchmarks	access:protected	signature:()
Benchmarks::nextInt	Benchmarks.cpp	/^int Benchmarks::nextInt(int n) {$/;"	f	class:Benchmarks	signature:(int n)
Benchmarks::nextInt	Benchmarks.h	/^	int nextInt(int n);$/;"	p	class:Benchmarks	access:protected	signature:(int n)
Benchmarks::nonSeparableGroupSize	Benchmarks.h	/^	int nonSeparableGroupSize;$/;"	m	class:Benchmarks	access:protected
Benchmarks::rastrigin	Benchmarks.cpp	/^double Benchmarks::rastrigin(double *x, int dim, int k)$/;"	f	class:Benchmarks	signature:(double *x, int dim, int k)
Benchmarks::rastrigin	Benchmarks.cpp	/^double Benchmarks::rastrigin(double*x,int dim){$/;"	f	class:Benchmarks	signature:(double*x,int dim)
Benchmarks::rastrigin	Benchmarks.h	/^	double rastrigin(double *x, int dim, int k); $/;"	p	class:Benchmarks	access:protected	signature:(double *x, int dim, int k)
Benchmarks::rastrigin	Benchmarks.h	/^	double rastrigin(double*x,int dim);$/;"	p	class:Benchmarks	access:protected	signature:(double*x,int dim)
Benchmarks::rosenbrock	Benchmarks.cpp	/^double Benchmarks::rosenbrock(double*x,int dim){$/;"	f	class:Benchmarks	signature:(double*x,int dim)
Benchmarks::rosenbrock	Benchmarks.cpp	/^double Benchmarks::rosenbrock(double*x,int dim, int k){$/;"	f	class:Benchmarks	signature:(double*x,int dim, int k)
Benchmarks::rosenbrock	Benchmarks.h	/^	double rosenbrock(double*x,int dim);$/;"	p	class:Benchmarks	access:protected	signature:(double*x,int dim)
Benchmarks::rosenbrock	Benchmarks.h	/^	double rosenbrock(double*x,int dim, int k);$/;"	p	class:Benchmarks	access:protected	signature:(double*x,int dim, int k)
Benchmarks::rot_ackley	Benchmarks.cpp	/^double Benchmarks::rot_ackley(double *x,int dim,int k)$/;"	f	class:Benchmarks	signature:(double *x,int dim,int k)
Benchmarks::rot_ackley	Benchmarks.cpp	/^double Benchmarks::rot_ackley(double*x,int dim){$/;"	f	class:Benchmarks	signature:(double*x,int dim)
Benchmarks::rot_ackley	Benchmarks.h	/^	double rot_ackley(double*x,int dim);$/;"	p	class:Benchmarks	access:protected	signature:(double*x,int dim)
Benchmarks::rot_ackley	Benchmarks.h	/^	double rot_ackley(double*x,int dim,int k);$/;"	p	class:Benchmarks	access:protected	signature:(double*x,int dim,int k)
Benchmarks::rot_elliptic	Benchmarks.cpp	/^double Benchmarks::rot_elliptic(double*x,int dim){$/;"	f	class:Benchmarks	signature:(double*x,int dim)
Benchmarks::rot_elliptic	Benchmarks.cpp	/^double Benchmarks::rot_elliptic(double*x,int dim, int k, double *lookup){$/;"	f	class:Benchmarks	signature:(double*x,int dim, int k, double *lookup)
Benchmarks::rot_elliptic	Benchmarks.h	/^	double rot_elliptic(double*x,int dim);$/;"	p	class:Benchmarks	access:protected	signature:(double*x,int dim)
Benchmarks::rot_elliptic	Benchmarks.h	/^	double rot_elliptic(double*x,int dim, int k, double *lookup);$/;"	p	class:Benchmarks	access:protected	signature:(double*x,int dim, int k, double *lookup)
Benchmarks::rot_rastrigin	Benchmarks.cpp	/^double Benchmarks::rot_rastrigin(double *x,int dim,int k)$/;"	f	class:Benchmarks	signature:(double *x,int dim,int k)
Benchmarks::rot_rastrigin	Benchmarks.cpp	/^double Benchmarks::rot_rastrigin(double*x,int dim){$/;"	f	class:Benchmarks	signature:(double*x,int dim)
Benchmarks::rot_rastrigin	Benchmarks.h	/^	double rot_rastrigin(double *x,int dim,int k);$/;"	p	class:Benchmarks	access:protected	signature:(double *x,int dim,int k)
Benchmarks::rot_rastrigin	Benchmarks.h	/^	double rot_rastrigin(double*x,int dim);$/;"	p	class:Benchmarks	access:protected	signature:(double*x,int dim)
Benchmarks::schwefel	Benchmarks.cpp	/^double Benchmarks::schwefel(double*x,int dim){$/;"	f	class:Benchmarks	signature:(double*x,int dim)
Benchmarks::schwefel	Benchmarks.cpp	/^double Benchmarks::schwefel(double*x,int dim, int k){$/;"	f	class:Benchmarks	signature:(double*x,int dim, int k)
Benchmarks::schwefel	Benchmarks.h	/^	double schwefel(double*x,int dim);$/;"	p	class:Benchmarks	access:protected	signature:(double*x,int dim)
Benchmarks::schwefel	Benchmarks.h	/^	double schwefel(double*x,int dim, int k);$/;"	p	class:Benchmarks	access:protected	signature:(double*x,int dim, int k)
Benchmarks::setOvectorToZero	Benchmarks.h	/^	bool setOvectorToZero;$/;"	m	class:Benchmarks	access:protected
Benchmarks::sphere	Benchmarks.cpp	/^double Benchmarks::sphere(double*x,int dim){$/;"	f	class:Benchmarks	signature:(double*x,int dim)
Benchmarks::sphere	Benchmarks.cpp	/^double Benchmarks::sphere(double*x,int dim, int k){$/;"	f	class:Benchmarks	signature:(double*x,int dim, int k)
Benchmarks::sphere	Benchmarks.h	/^	double sphere(double*x,int dim);$/;"	p	class:Benchmarks	access:protected	signature:(double*x,int dim)
Benchmarks::sphere	Benchmarks.h	/^	double sphere(double*x,int dim, int k);$/;"	p	class:Benchmarks	access:protected	signature:(double*x,int dim, int k)
Benchmarks::~Benchmarks	Benchmarks.cpp	/^Benchmarks::~Benchmarks(){$/;"	f	class:Benchmarks	signature:()
Benchmarks::~Benchmarks	Benchmarks.h	/^	~Benchmarks();$/;"	p	class:Benchmarks	access:public	signature:()
CC	Makefile	/^CC=g++$/;"	m
CFLAGS	Makefile	/^CFLAGS=-Wall -pedantic -ggdb$/;"	m
D	Benchmarks.h	13;"	d
E	Benchmarks.h	11;"	d
F1	F1.cpp	/^F1::F1(RunParameter runParam):Benchmarks(runParam){$/;"	f	class:F1	signature:(RunParameter runParam)
F1	F1.h	/^	F1(RunParameter runParam);$/;"	p	class:F1	access:public	signature:(RunParameter runParam)
F1	F1.h	/^class F1:public Benchmarks{$/;"	c	inherits:Benchmarks
F10	F10.cpp	/^F10::F10(RunParameter runParam):Benchmarks(runParam){$/;"	f	class:F10	signature:(RunParameter runParam)
F10	F10.h	/^	F10(RunParameter runParam);$/;"	p	class:F10	access:public	signature:(RunParameter runParam)
F10	F10.h	/^class F10:public Benchmarks{$/;"	c	inherits:Benchmarks
F10::F10	F10.cpp	/^F10::F10(RunParameter runParam):Benchmarks(runParam){$/;"	f	class:F10	signature:(RunParameter runParam)
F10::F10	F10.h	/^	F10(RunParameter runParam);$/;"	p	class:F10	access:public	signature:(RunParameter runParam)
F10::compute	F10.cpp	/^double F10::compute(double*x){$/;"	f	class:F10	signature:(double*x)
F10::compute	F10.h	/^	double compute(double* x) ;$/;"	p	class:F10	access:public	signature:(double* x)
F10::maxX	F10.h	/^	static const int maxX = 5;$/;"	m	class:F10	access:protected
F10::minX	F10.h	/^	static const int minX = -5;$/;"	m	class:F10	access:protected
F10::~F10	F10.cpp	/^F10::~F10(){$/;"	f	class:F10	signature:()
F10::~F10	F10.h	/^	~F10();$/;"	p	class:F10	access:public	signature:()
F11	F11.cpp	/^F11::F11(RunParameter runParam):Benchmarks(runParam){$/;"	f	class:F11	signature:(RunParameter runParam)
F11	F11.h	/^	F11(RunParameter runParam);$/;"	p	class:F11	access:public	signature:(RunParameter runParam)
F11	F11.h	/^class F11:public Benchmarks{$/;"	c	inherits:Benchmarks
F11::F11	F11.cpp	/^F11::F11(RunParameter runParam):Benchmarks(runParam){$/;"	f	class:F11	signature:(RunParameter runParam)
F11::F11	F11.h	/^	F11(RunParameter runParam);$/;"	p	class:F11	access:public	signature:(RunParameter runParam)
F11::compute	F11.cpp	/^double F11::compute(double*x){$/;"	f	class:F11	signature:(double*x)
F11::compute	F11.h	/^	double compute(double* x) ;$/;"	p	class:F11	access:public	signature:(double* x)
F11::maxX	F11.h	/^	static const int maxX = 32;$/;"	m	class:F11	access:protected
F11::minX	F11.h	/^	static const int minX = -32;$/;"	m	class:F11	access:protected
F11::~F11	F11.cpp	/^F11::~F11(){$/;"	f	class:F11	signature:()
F11::~F11	F11.h	/^	~F11();$/;"	p	class:F11	access:public	signature:()
F12	F12.cpp	/^F12::F12(RunParameter runParam):Benchmarks(runParam){$/;"	f	class:F12	signature:(RunParameter runParam)
F12	F12.h	/^	F12(RunParameter runParam);$/;"	p	class:F12	access:public	signature:(RunParameter runParam)
F12	F12.h	/^class F12:public Benchmarks{$/;"	c	inherits:Benchmarks
F12::F12	F12.cpp	/^F12::F12(RunParameter runParam):Benchmarks(runParam){$/;"	f	class:F12	signature:(RunParameter runParam)
F12::F12	F12.h	/^	F12(RunParameter runParam);$/;"	p	class:F12	access:public	signature:(RunParameter runParam)
F12::compute	F12.cpp	/^double F12::compute(double*x){$/;"	f	class:F12	signature:(double*x)
F12::compute	F12.h	/^	double compute(double* x) ;$/;"	p	class:F12	access:public	signature:(double* x)
F12::maxX	F12.h	/^	static const int maxX = 100;$/;"	m	class:F12	access:protected
F12::minX	F12.h	/^	static const int minX = -100;$/;"	m	class:F12	access:protected
F12::~F12	F12.cpp	/^F12::~F12(){$/;"	f	class:F12	signature:()
F12::~F12	F12.h	/^	~F12();$/;"	p	class:F12	access:public	signature:()
F13	F13.cpp	/^F13::F13(RunParameter runParam):Benchmarks(runParam){$/;"	f	class:F13	signature:(RunParameter runParam)
F13	F13.h	/^	F13(RunParameter runParam);$/;"	p	class:F13	access:public	signature:(RunParameter runParam)
F13	F13.h	/^class F13:public Benchmarks{$/;"	c	inherits:Benchmarks
F13::F13	F13.cpp	/^F13::F13(RunParameter runParam):Benchmarks(runParam){$/;"	f	class:F13	signature:(RunParameter runParam)
F13::F13	F13.h	/^	F13(RunParameter runParam);$/;"	p	class:F13	access:public	signature:(RunParameter runParam)
F13::compute	F13.cpp	/^double F13::compute(double*x){$/;"	f	class:F13	signature:(double*x)
F13::compute	F13.h	/^	double compute(double* x) ;$/;"	p	class:F13	access:public	signature:(double* x)
F13::maxX	F13.h	/^	static const int maxX = 100;$/;"	m	class:F13	access:protected
F13::minX	F13.h	/^	static const int minX = -100;$/;"	m	class:F13	access:protected
F13::~F13	F13.cpp	/^F13::~F13(){$/;"	f	class:F13	signature:()
F13::~F13	F13.h	/^	~F13();$/;"	p	class:F13	access:public	signature:()
F14	F14.cpp	/^F14::F14(RunParameter runParam):Benchmarks(runParam){$/;"	f	class:F14	signature:(RunParameter runParam)
F14	F14.h	/^	F14(RunParameter runParam);$/;"	p	class:F14	access:public	signature:(RunParameter runParam)
F14	F14.h	/^class F14:public Benchmarks{$/;"	c	inherits:Benchmarks
F14::F14	F14.cpp	/^F14::F14(RunParameter runParam):Benchmarks(runParam){$/;"	f	class:F14	signature:(RunParameter runParam)
F14::F14	F14.h	/^	F14(RunParameter runParam);$/;"	p	class:F14	access:public	signature:(RunParameter runParam)
F14::compute	F14.cpp	/^double F14::compute(double*x){$/;"	f	class:F14	signature:(double*x)
F14::compute	F14.h	/^	double compute(double* x) ;$/;"	p	class:F14	access:public	signature:(double* x)
F14::maxX	F14.h	/^	static const int maxX = 100;$/;"	m	class:F14	access:protected
F14::minX	F14.h	/^	static const int minX = -100;$/;"	m	class:F14	access:protected
F14::~F14	F14.cpp	/^F14::~F14(){$/;"	f	class:F14	signature:()
F14::~F14	F14.h	/^	~F14();$/;"	p	class:F14	access:public	signature:()
F15	F15.cpp	/^F15::F15(RunParameter runParam):Benchmarks(runParam){$/;"	f	class:F15	signature:(RunParameter runParam)
F15	F15.h	/^	F15(RunParameter runParam);$/;"	p	class:F15	access:public	signature:(RunParameter runParam)
F15	F15.h	/^class F15:public Benchmarks{$/;"	c	inherits:Benchmarks
F15::F15	F15.cpp	/^F15::F15(RunParameter runParam):Benchmarks(runParam){$/;"	f	class:F15	signature:(RunParameter runParam)
F15::F15	F15.h	/^	F15(RunParameter runParam);$/;"	p	class:F15	access:public	signature:(RunParameter runParam)
F15::compute	F15.cpp	/^double F15::compute(double*x){$/;"	f	class:F15	signature:(double*x)
F15::compute	F15.h	/^	double compute(double* x) ;$/;"	p	class:F15	access:public	signature:(double* x)
F15::maxX	F15.h	/^	static const int maxX = 5;$/;"	m	class:F15	access:protected
F15::minX	F15.h	/^	static const int minX = -5;$/;"	m	class:F15	access:protected
F15::~F15	F15.cpp	/^F15::~F15(){$/;"	f	class:F15	signature:()
F15::~F15	F15.h	/^	~F15();$/;"	p	class:F15	access:public	signature:()
F16	F16.cpp	/^F16::F16(RunParameter runParam):Benchmarks(runParam){$/;"	f	class:F16	signature:(RunParameter runParam)
F16	F16.h	/^	F16(RunParameter runParam);$/;"	p	class:F16	access:public	signature:(RunParameter runParam)
F16	F16.h	/^class F16:public Benchmarks{$/;"	c	inherits:Benchmarks
F16::F16	F16.cpp	/^F16::F16(RunParameter runParam):Benchmarks(runParam){$/;"	f	class:F16	signature:(RunParameter runParam)
F16::F16	F16.h	/^	F16(RunParameter runParam);$/;"	p	class:F16	access:public	signature:(RunParameter runParam)
F16::compute	F16.cpp	/^double F16::compute(double*x){$/;"	f	class:F16	signature:(double*x)
F16::compute	F16.h	/^	double compute(double* x) ;$/;"	p	class:F16	access:public	signature:(double* x)
F16::maxX	F16.h	/^	static const int maxX = 32;$/;"	m	class:F16	access:protected
F16::minX	F16.h	/^	static const int minX = -32;$/;"	m	class:F16	access:protected
F16::~F16	F16.cpp	/^F16::~F16(){$/;"	f	class:F16	signature:()
F16::~F16	F16.h	/^	~F16();$/;"	p	class:F16	access:public	signature:()
F17	F17.cpp	/^F17::F17(RunParameter runParam):Benchmarks(runParam){$/;"	f	class:F17	signature:(RunParameter runParam)
F17	F17.h	/^	F17(RunParameter runParam);$/;"	p	class:F17	access:public	signature:(RunParameter runParam)
F17	F17.h	/^class F17:public Benchmarks{$/;"	c	inherits:Benchmarks
F17::F17	F17.cpp	/^F17::F17(RunParameter runParam):Benchmarks(runParam){$/;"	f	class:F17	signature:(RunParameter runParam)
F17::F17	F17.h	/^	F17(RunParameter runParam);$/;"	p	class:F17	access:public	signature:(RunParameter runParam)
F17::compute	F17.cpp	/^double F17::compute(double*x){$/;"	f	class:F17	signature:(double*x)
F17::compute	F17.h	/^	double compute(double* x) ;$/;"	p	class:F17	access:public	signature:(double* x)
F17::maxX	F17.h	/^	static const int maxX = 100;$/;"	m	class:F17	access:protected
F17::minX	F17.h	/^	static const int minX = -100;$/;"	m	class:F17	access:protected
F17::~F17	F17.cpp	/^F17::~F17(){$/;"	f	class:F17	signature:()
F17::~F17	F17.h	/^	~F17();$/;"	p	class:F17	access:public	signature:()
F1::F1	F1.cpp	/^F1::F1(RunParameter runParam):Benchmarks(runParam){$/;"	f	class:F1	signature:(RunParameter runParam)
F1::F1	F1.h	/^	F1(RunParameter runParam);$/;"	p	class:F1	access:public	signature:(RunParameter runParam)
F1::Ovector	F1.h	/^	double *Ovector;$/;"	m	class:F1	access:protected
F1::compute	F1.cpp	/^double F1::compute(double* x) {$/;"	f	class:F1	signature:(double* x)
F1::compute	F1.h	/^	double compute(double* x) ;$/;"	p	class:F1	access:public	signature:(double* x)
F1::maxX	F1.h	/^	static const int maxX = 100;$/;"	m	class:F1	access:protected
F1::minX	F1.h	/^	static const int minX = -100;$/;"	m	class:F1	access:protected
F1::~F1	F1.cpp	/^F1::~F1(){$/;"	f	class:F1	signature:()
F1::~F1	F1.h	/^	~F1();$/;"	p	class:F1	access:public	signature:()
F2	F2.cpp	/^F2::F2(RunParameter runParam):Benchmarks(runParam){$/;"	f	class:F2	signature:(RunParameter runParam)
F2	F2.h	/^	F2(RunParameter runParam);$/;"	p	class:F2	access:public	signature:(RunParameter runParam)
F2	F2.h	/^class F2:public Benchmarks{$/;"	c	inherits:Benchmarks
F2::F2	F2.cpp	/^F2::F2(RunParameter runParam):Benchmarks(runParam){$/;"	f	class:F2	signature:(RunParameter runParam)
F2::F2	F2.h	/^	F2(RunParameter runParam);$/;"	p	class:F2	access:public	signature:(RunParameter runParam)
F2::Ovector	F2.h	/^	double *Ovector;$/;"	m	class:F2	access:protected
F2::compute	F2.cpp	/^double F2::compute(double* x){$/;"	f	class:F2	signature:(double* x)
F2::compute	F2.h	/^	double compute(double* x) ;$/;"	p	class:F2	access:public	signature:(double* x)
F2::maxX	F2.h	/^	static const int maxX = 5;$/;"	m	class:F2	access:protected
F2::minX	F2.h	/^	static const int minX = -5;$/;"	m	class:F2	access:protected
F2::~F2	F2.cpp	/^F2::~F2(){$/;"	f	class:F2	signature:()
F2::~F2	F2.h	/^	~F2();$/;"	p	class:F2	access:public	signature:()
F3	F3.cpp	/^F3::F3(RunParameter runParam):Benchmarks(runParam){$/;"	f	class:F3	signature:(RunParameter runParam)
F3	F3.h	/^	F3(RunParameter runParam);$/;"	p	class:F3	access:public	signature:(RunParameter runParam)
F3	F3.h	/^class F3:public Benchmarks{$/;"	c	inherits:Benchmarks
F3::F3	F3.cpp	/^F3::F3(RunParameter runParam):Benchmarks(runParam){$/;"	f	class:F3	signature:(RunParameter runParam)
F3::F3	F3.h	/^	F3(RunParameter runParam);$/;"	p	class:F3	access:public	signature:(RunParameter runParam)
F3::compute	F3.cpp	/^ double F3::compute(double*x){$/;"	f	class:F3	signature:(double*x)
F3::compute	F3.h	/^	double compute(double* x) ;$/;"	p	class:F3	access:public	signature:(double* x)
F3::maxX	F3.h	/^	static const int maxX = 32;$/;"	m	class:F3	access:protected
F3::minX	F3.h	/^	static const int minX = -32;$/;"	m	class:F3	access:protected
F3::~F3	F3.cpp	/^F3::~F3(){$/;"	f	class:F3	signature:()
F3::~F3	F3.h	/^	~F3();$/;"	p	class:F3	access:public	signature:()
F4	F4.cpp	/^F4::F4(RunParameter runParam):Benchmarks(runParam){$/;"	f	class:F4	signature:(RunParameter runParam)
F4	F4.h	/^	F4(RunParameter runParam);$/;"	p	class:F4	access:public	signature:(RunParameter runParam)
F4	F4.h	/^class F4:public Benchmarks{$/;"	c	inherits:Benchmarks
F4::F4	F4.cpp	/^F4::F4(RunParameter runParam):Benchmarks(runParam){$/;"	f	class:F4	signature:(RunParameter runParam)
F4::F4	F4.h	/^	F4(RunParameter runParam);$/;"	p	class:F4	access:public	signature:(RunParameter runParam)
F4::compute	F4.cpp	/^double F4::compute(double*x){$/;"	f	class:F4	signature:(double*x)
F4::compute	F4.h	/^	double compute(double* x) ;$/;"	p	class:F4	access:public	signature:(double* x)
F4::maxX	F4.h	/^	static const int maxX = 100;$/;"	m	class:F4	access:protected
F4::minX	F4.h	/^	static const int minX = -100;$/;"	m	class:F4	access:protected
F4::~F4	F4.cpp	/^F4::~F4(){$/;"	f	class:F4	signature:()
F4::~F4	F4.h	/^	~F4();$/;"	p	class:F4	access:public	signature:()
F5	F5.cpp	/^F5::F5(RunParameter runParam):Benchmarks(runParam){$/;"	f	class:F5	signature:(RunParameter runParam)
F5	F5.h	/^	F5(RunParameter runParam);$/;"	p	class:F5	access:public	signature:(RunParameter runParam)
F5	F5.h	/^class F5:public Benchmarks{$/;"	c	inherits:Benchmarks
F5::F5	F5.cpp	/^F5::F5(RunParameter runParam):Benchmarks(runParam){$/;"	f	class:F5	signature:(RunParameter runParam)
F5::F5	F5.h	/^	F5(RunParameter runParam);$/;"	p	class:F5	access:public	signature:(RunParameter runParam)
F5::compute	F5.cpp	/^double F5::compute(double*x){$/;"	f	class:F5	signature:(double*x)
F5::compute	F5.h	/^	double compute(double* x) ;$/;"	p	class:F5	access:public	signature:(double* x)
F5::maxX	F5.h	/^	static const int maxX = 5;$/;"	m	class:F5	access:protected
F5::minX	F5.h	/^	static const int minX = -5;$/;"	m	class:F5	access:protected
F5::~F5	F5.cpp	/^F5::~F5(){$/;"	f	class:F5	signature:()
F5::~F5	F5.h	/^	~F5();$/;"	p	class:F5	access:public	signature:()
F6	F6.cpp	/^F6::F6(RunParameter runParam):Benchmarks(runParam){$/;"	f	class:F6	signature:(RunParameter runParam)
F6	F6.h	/^	F6(RunParameter runParam);$/;"	p	class:F6	access:public	signature:(RunParameter runParam)
F6	F6.h	/^class F6:public Benchmarks{$/;"	c	inherits:Benchmarks
F6::F6	F6.cpp	/^F6::F6(RunParameter runParam):Benchmarks(runParam){$/;"	f	class:F6	signature:(RunParameter runParam)
F6::F6	F6.h	/^	F6(RunParameter runParam);$/;"	p	class:F6	access:public	signature:(RunParameter runParam)
F6::compute	F6.cpp	/^double F6::compute(double*x){$/;"	f	class:F6	signature:(double*x)
F6::compute	F6.h	/^	double compute(double* x) ;$/;"	p	class:F6	access:public	signature:(double* x)
F6::maxX	F6.h	/^	static const int maxX = 32;$/;"	m	class:F6	access:protected
F6::minX	F6.h	/^	static const int minX = -32;$/;"	m	class:F6	access:protected
F6::~F6	F6.cpp	/^F6::~F6(){$/;"	f	class:F6	signature:()
F6::~F6	F6.h	/^	~F6();$/;"	p	class:F6	access:public	signature:()
F7	F7.cpp	/^F7::F7(RunParameter runParam):Benchmarks(runParam){$/;"	f	class:F7	signature:(RunParameter runParam)
F7	F7.h	/^	F7(RunParameter runParam);$/;"	p	class:F7	access:public	signature:(RunParameter runParam)
F7	F7.h	/^class F7:public Benchmarks{$/;"	c	inherits:Benchmarks
F7::F7	F7.cpp	/^F7::F7(RunParameter runParam):Benchmarks(runParam){$/;"	f	class:F7	signature:(RunParameter runParam)
F7::F7	F7.h	/^	F7(RunParameter runParam);$/;"	p	class:F7	access:public	signature:(RunParameter runParam)
F7::compute	F7.cpp	/^double F7::compute(double*x){$/;"	f	class:F7	signature:(double*x)
F7::compute	F7.h	/^	double compute(double* x) ;$/;"	p	class:F7	access:public	signature:(double* x)
F7::maxX	F7.h	/^	static const int maxX = 100;$/;"	m	class:F7	access:protected
F7::minX	F7.h	/^	static const int minX = -100;$/;"	m	class:F7	access:protected
F7::~F7	F7.cpp	/^F7::~F7(){$/;"	f	class:F7	signature:()
F7::~F7	F7.h	/^	~F7();$/;"	p	class:F7	access:public	signature:()
F8	F8.cpp	/^F8::F8(RunParameter runParam):Benchmarks(runParam){$/;"	f	class:F8	signature:(RunParameter runParam)
F8	F8.h	/^	F8(RunParameter runParam);$/;"	p	class:F8	access:public	signature:(RunParameter runParam)
F8	F8.h	/^class F8:public Benchmarks{$/;"	c	inherits:Benchmarks
F8::F8	F8.cpp	/^F8::F8(RunParameter runParam):Benchmarks(runParam){$/;"	f	class:F8	signature:(RunParameter runParam)
F8::F8	F8.h	/^	F8(RunParameter runParam);$/;"	p	class:F8	access:public	signature:(RunParameter runParam)
F8::compute	F8.cpp	/^double F8::compute(double* x){$/;"	f	class:F8	signature:(double* x)
F8::compute	F8.h	/^	double compute(double* x) ;$/;"	p	class:F8	access:public	signature:(double* x)
F8::maxX	F8.h	/^	static const int maxX = 100;$/;"	m	class:F8	access:protected
F8::minX	F8.h	/^	static const int minX = -100;$/;"	m	class:F8	access:protected
F8::~F8	F8.cpp	/^F8::~F8(){$/;"	f	class:F8	signature:()
F8::~F8	F8.h	/^	~F8();$/;"	p	class:F8	access:public	signature:()
F9	F9.cpp	/^F9::F9(RunParameter runParam):Benchmarks(runParam){$/;"	f	class:F9	signature:(RunParameter runParam)
F9	F9.h	/^	F9(RunParameter runParam);$/;"	p	class:F9	access:public	signature:(RunParameter runParam)
F9	F9.h	/^class F9:public Benchmarks{$/;"	c	inherits:Benchmarks
F9::F9	F9.cpp	/^F9::F9(RunParameter runParam):Benchmarks(runParam){$/;"	f	class:F9	signature:(RunParameter runParam)
F9::F9	F9.h	/^	F9(RunParameter runParam);$/;"	p	class:F9	access:public	signature:(RunParameter runParam)
F9::compute	F9.cpp	/^double F9::compute(double*x){$/;"	f	class:F9	signature:(double*x)
F9::compute	F9.h	/^	double compute(double* x) ;$/;"	p	class:F9	access:public	signature:(double* x)
F9::maxX	F9.h	/^	static const int maxX = 100;$/;"	m	class:F9	access:protected
F9::minX	F9.h	/^	static const int minX = -100;$/;"	m	class:F9	access:protected
F9::~F9	F9.cpp	/^F9::~F9(){$/;"	f	class:F9	signature:()
F9::~F9	F9.h	/^	~F9();$/;"	p	class:F9	access:public	signature:()
L	Benchmarks.h	12;"	d
M	Benchmarks.h	/^	int64_t M ;$/;"	m	class:Benchmarks	access:protected
MASK	Benchmarks.h	/^	int64_t MASK;$/;"	m	class:Benchmarks	access:protected
NP	RunParameter.h	/^	int NP;$/;"	m	class:RunParameter	access:public
OBJECTS	Makefile	/^OBJECTS=main.o RunParameter.o F1.o F2.o F3.o F4.o F5.o F6.o F7.o F8.o F9.o F10.o F11.o F12.o F13.o F14.o F15.o F16.o F17.o Benchmarks.o$/;"	m
Ovector	Benchmarks.h	/^	double *Ovector;$/;"	m	class:Benchmarks	access:protected
Ovector	F1.h	/^	double *Ovector;$/;"	m	class:F1	access:protected
Ovector	F2.h	/^	double *Ovector;$/;"	m	class:F2	access:protected
PI	Benchmarks.h	10;"	d
Pvector	Benchmarks.h	/^	int*    Pvector;$/;"	m	class:Benchmarks	access:protected
RotMatrix	Benchmarks.h	/^	double* RotMatrix;$/;"	m	class:Benchmarks	access:protected
RunParameter	RunParameter.cpp	/^RunParameter::RunParameter(){$/;"	f	class:RunParameter	signature:()
RunParameter	RunParameter.h	/^	RunParameter();$/;"	p	class:RunParameter	access:public	signature:()
RunParameter	RunParameter.h	/^class RunParameter{$/;"	c
RunParameter::NP	RunParameter.h	/^	int NP;$/;"	m	class:RunParameter	access:public
RunParameter::RunParameter	RunParameter.cpp	/^RunParameter::RunParameter(){$/;"	f	class:RunParameter	signature:()
RunParameter::RunParameter	RunParameter.h	/^	RunParameter();$/;"	p	class:RunParameter	access:public	signature:()
RunParameter::dimension	RunParameter.h	/^	int dimension;$/;"	m	class:RunParameter	access:public
RunParameter::fitnessCheckPoint	RunParameter.h	/^	vector<int> fitnessCheckPoint;$/;"	m	class:RunParameter	access:public
RunParameter::functionToRun	RunParameter.h	/^	vector<int> functionToRun;$/;"	m	class:RunParameter	access:public
RunParameter::initRandomSeed	RunParameter.h	/^	int initRandomSeed;$/;"	m	class:RunParameter	access:public
RunParameter::initialGroupSize	RunParameter.h	/^	int initialGroupSize;$/;"	m	class:RunParameter	access:public
RunParameter::nonSeparableGroupSize	RunParameter.h	/^	int nonSeparableGroupSize;$/;"	m	class:RunParameter	access:public
RunParameter::numOfRun	RunParameter.h	/^	int numOfRun;$/;"	m	class:RunParameter	access:public
RunParameter::samplingInterval	RunParameter.h	/^	int samplingInterval;$/;"	m	class:RunParameter	access:public
RunParameter::~RunParameter	RunParameter.cpp	/^RunParameter::~RunParameter() {$/;"	f	class:RunParameter	signature:()
RunParameter::~RunParameter	RunParameter.h	/^	~RunParameter();$/;"	p	class:RunParameter	access:public	signature:()
_BENCHMARKS_H	Benchmarks.h	2;"	d
_F10_H	F10.h	2;"	d
_F11_H	F11.h	2;"	d
_F12_H	F12.h	2;"	d
_F13_H	F13.h	2;"	d
_F14_H	F14.h	2;"	d
_F15_H	F15.h	2;"	d
_F16_H	F16.h	2;"	d
_F17_H	F17.h	2;"	d
_F1_H	F1.h	2;"	d
_F2_H	F2.h	2;"	d
_F3_H	F3.h	2;"	d
_F4_H	F4.h	2;"	d
_F5_H	F5.h	2;"	d
_F6_H	F6.h	2;"	d
_F7_H	F7.h	3;"	d
_F8_H	F8.h	2;"	d
_F9_H	F9.h	2;"	d
_HEADER_H	Header.h	2;"	d
_RUNPARAMETER_H	RunParameter.h	2;"	d
ackley	Benchmarks.cpp	/^double Benchmarks::ackley(double *x, int dim, int k)$/;"	f	class:Benchmarks	signature:(double *x, int dim, int k)
ackley	Benchmarks.cpp	/^double Benchmarks::ackley(double*x,int dim){$/;"	f	class:Benchmarks	signature:(double*x,int dim)
ackley	Benchmarks.h	/^	double ackley(double*x,int dim);$/;"	p	class:Benchmarks	access:protected	signature:(double*x,int dim)
ackley	Benchmarks.h	/^	double ackley(double*x,int dim, int k);$/;"	p	class:Benchmarks	access:protected	signature:(double*x,int dim, int k)
anotherz	Benchmarks.h	/^	double* anotherz;$/;"	m	class:Benchmarks	access:protected
anotherz1	Benchmarks.h	/^	double* anotherz1;$/;"	m	class:Benchmarks	access:protected
anotherz2	Benchmarks.h	/^	double* anotherz2;$/;"	m	class:Benchmarks	access:protected
compute	Benchmarks.h	/^	virtual double compute(double* x){return 0;};$/;"	f	class:Benchmarks	access:public	signature:(double* x)
compute	F1.cpp	/^double F1::compute(double* x) {$/;"	f	class:F1	signature:(double* x)
compute	F1.h	/^	double compute(double* x) ;$/;"	p	class:F1	access:public	signature:(double* x)
compute	F10.cpp	/^double F10::compute(double*x){$/;"	f	class:F10	signature:(double*x)
compute	F10.h	/^	double compute(double* x) ;$/;"	p	class:F10	access:public	signature:(double* x)
compute	F11.cpp	/^double F11::compute(double*x){$/;"	f	class:F11	signature:(double*x)
compute	F11.h	/^	double compute(double* x) ;$/;"	p	class:F11	access:public	signature:(double* x)
compute	F12.cpp	/^double F12::compute(double*x){$/;"	f	class:F12	signature:(double*x)
compute	F12.h	/^	double compute(double* x) ;$/;"	p	class:F12	access:public	signature:(double* x)
compute	F13.cpp	/^double F13::compute(double*x){$/;"	f	class:F13	signature:(double*x)
compute	F13.h	/^	double compute(double* x) ;$/;"	p	class:F13	access:public	signature:(double* x)
compute	F14.cpp	/^double F14::compute(double*x){$/;"	f	class:F14	signature:(double*x)
compute	F14.h	/^	double compute(double* x) ;$/;"	p	class:F14	access:public	signature:(double* x)
compute	F15.cpp	/^double F15::compute(double*x){$/;"	f	class:F15	signature:(double*x)
compute	F15.h	/^	double compute(double* x) ;$/;"	p	class:F15	access:public	signature:(double* x)
compute	F16.cpp	/^double F16::compute(double*x){$/;"	f	class:F16	signature:(double*x)
compute	F16.h	/^	double compute(double* x) ;$/;"	p	class:F16	access:public	signature:(double* x)
compute	F17.cpp	/^double F17::compute(double*x){$/;"	f	class:F17	signature:(double*x)
compute	F17.h	/^	double compute(double* x) ;$/;"	p	class:F17	access:public	signature:(double* x)
compute	F2.cpp	/^double F2::compute(double* x){$/;"	f	class:F2	signature:(double* x)
compute	F2.h	/^	double compute(double* x) ;$/;"	p	class:F2	access:public	signature:(double* x)
compute	F3.cpp	/^ double F3::compute(double*x){$/;"	f	class:F3	signature:(double*x)
compute	F3.h	/^	double compute(double* x) ;$/;"	p	class:F3	access:public	signature:(double* x)
compute	F4.cpp	/^double F4::compute(double*x){$/;"	f	class:F4	signature:(double*x)
compute	F4.h	/^	double compute(double* x) ;$/;"	p	class:F4	access:public	signature:(double* x)
compute	F5.cpp	/^double F5::compute(double*x){$/;"	f	class:F5	signature:(double*x)
compute	F5.h	/^	double compute(double* x) ;$/;"	p	class:F5	access:public	signature:(double* x)
compute	F6.cpp	/^double F6::compute(double*x){$/;"	f	class:F6	signature:(double*x)
compute	F6.h	/^	double compute(double* x) ;$/;"	p	class:F6	access:public	signature:(double* x)
compute	F7.cpp	/^double F7::compute(double*x){$/;"	f	class:F7	signature:(double*x)
compute	F7.h	/^	double compute(double* x) ;$/;"	p	class:F7	access:public	signature:(double* x)
compute	F8.cpp	/^double F8::compute(double* x){$/;"	f	class:F8	signature:(double* x)
compute	F8.h	/^	double compute(double* x) ;$/;"	p	class:F8	access:public	signature:(double* x)
compute	F9.cpp	/^double F9::compute(double*x){$/;"	f	class:F9	signature:(double*x)
compute	F9.h	/^	double compute(double* x) ;$/;"	p	class:F9	access:public	signature:(double* x)
createPermVector	Benchmarks.cpp	/^int* Benchmarks::createPermVector(int dim){$/;"	f	class:Benchmarks	signature:(int dim)
createPermVector	Benchmarks.h	/^	int* createPermVector(int dim);$/;"	p	class:Benchmarks	access:protected	signature:(int dim)
createRotMatrix	Benchmarks.cpp	/^double** Benchmarks::createRotMatrix(int dim){$/;"	f	class:Benchmarks	signature:(int dim)
createRotMatrix	Benchmarks.h	/^	double** createRotMatrix(int dim);$/;"	p	class:Benchmarks	access:protected	signature:(int dim)
createRotMatrix1D	Benchmarks.cpp	/^double* Benchmarks::createRotMatrix1D(int dim){$/;"	f	class:Benchmarks	signature:(int dim)
createRotMatrix1D	Benchmarks.h	/^	double* createRotMatrix1D(int dim);$/;"	p	class:Benchmarks	access:protected	signature:(int dim)
createShiftVector	Benchmarks.cpp	/^double* Benchmarks::createShiftVector(int dim, double min,double max) {$/;"	f	class:Benchmarks	signature:(int dim, double min,double max)
createShiftVector	Benchmarks.h	/^	double* createShiftVector(int dim, double min,double max);$/;"	p	class:Benchmarks	access:protected	signature:(int dim, double min,double max)
dimension	Benchmarks.h	/^	int dimension;$/;"	m	class:Benchmarks	access:protected
dimension	RunParameter.h	/^	int dimension;$/;"	m	class:RunParameter	access:public
elliptic	Benchmarks.cpp	/^double Benchmarks::elliptic(double*x, int dim, int k) {$/;"	f	class:Benchmarks	signature:(double*x, int dim, int k)
elliptic	Benchmarks.cpp	/^double Benchmarks::elliptic(double*x,int dim) {$/;"	f	class:Benchmarks	signature:(double*x,int dim)
elliptic	Benchmarks.h	/^	double elliptic(double*x, int dim, int k);$/;"	p	class:Benchmarks	access:protected	signature:(double*x, int dim, int k)
elliptic	Benchmarks.h	/^	double elliptic(double*x,int dim);$/;"	p	class:Benchmarks	access:protected	signature:(double*x,int dim)
fitnessCheckPoint	RunParameter.h	/^	vector<int> fitnessCheckPoint;$/;"	m	class:RunParameter	access:public
functionInitRandomSeed	Benchmarks.h	/^	int64_t functionInitRandomSeed;$/;"	m	class:Benchmarks	access:protected
functionToRun	RunParameter.h	/^	vector<int> functionToRun;$/;"	m	class:RunParameter	access:public
initRandomSeed	RunParameter.h	/^	int initRandomSeed;$/;"	m	class:RunParameter	access:public
initialGroupSize	RunParameter.h	/^	int initialGroupSize;$/;"	m	class:RunParameter	access:public
lookupprepare	Benchmarks.cpp	/^double* Benchmarks::lookupprepare(int dim) {$/;"	f	class:Benchmarks	signature:(int dim)
lookupprepare	Benchmarks.h	/^	double* lookupprepare(int dim);$/;"	p	class:Benchmarks	access:protected	signature:(int dim)
m_havenextGaussian	Benchmarks.h	/^	bool  m_havenextGaussian;$/;"	m	class:Benchmarks	access:protected
m_nextGaussian	Benchmarks.h	/^	double m_nextGaussian;$/;"	m	class:Benchmarks	access:protected
m_seed	Benchmarks.h	/^	int64_t m_seed;$/;"	m	class:Benchmarks	access:protected
main	main.cpp	/^int main(){$/;"	f	signature:()
maxX	F1.h	/^	static const int maxX = 100;$/;"	m	class:F1	access:protected
maxX	F10.h	/^	static const int maxX = 5;$/;"	m	class:F10	access:protected
maxX	F11.h	/^	static const int maxX = 32;$/;"	m	class:F11	access:protected
maxX	F12.h	/^	static const int maxX = 100;$/;"	m	class:F12	access:protected
maxX	F13.h	/^	static const int maxX = 100;$/;"	m	class:F13	access:protected
maxX	F14.h	/^	static const int maxX = 100;$/;"	m	class:F14	access:protected
maxX	F15.h	/^	static const int maxX = 5;$/;"	m	class:F15	access:protected
maxX	F16.h	/^	static const int maxX = 32;$/;"	m	class:F16	access:protected
maxX	F17.h	/^	static const int maxX = 100;$/;"	m	class:F17	access:protected
maxX	F2.h	/^	static const int maxX = 5;$/;"	m	class:F2	access:protected
maxX	F3.h	/^	static const int maxX = 32;$/;"	m	class:F3	access:protected
maxX	F4.h	/^	static const int maxX = 100;$/;"	m	class:F4	access:protected
maxX	F5.h	/^	static const int maxX = 5;$/;"	m	class:F5	access:protected
maxX	F6.h	/^	static const int maxX = 32;$/;"	m	class:F6	access:protected
maxX	F7.h	/^	static const int maxX = 100;$/;"	m	class:F7	access:protected
maxX	F8.h	/^	static const int maxX = 100;$/;"	m	class:F8	access:protected
maxX	F9.h	/^	static const int maxX = 100;$/;"	m	class:F9	access:protected
minX	F1.h	/^	static const int minX = -100;$/;"	m	class:F1	access:protected
minX	F10.h	/^	static const int minX = -5;$/;"	m	class:F10	access:protected
minX	F11.h	/^	static const int minX = -32;$/;"	m	class:F11	access:protected
minX	F12.h	/^	static const int minX = -100;$/;"	m	class:F12	access:protected
minX	F13.h	/^	static const int minX = -100;$/;"	m	class:F13	access:protected
minX	F14.h	/^	static const int minX = -100;$/;"	m	class:F14	access:protected
minX	F15.h	/^	static const int minX = -5;$/;"	m	class:F15	access:protected
minX	F16.h	/^	static const int minX = -32;$/;"	m	class:F16	access:protected
minX	F17.h	/^	static const int minX = -100;$/;"	m	class:F17	access:protected
minX	F2.h	/^	static const int minX = -5;$/;"	m	class:F2	access:protected
minX	F3.h	/^	static const int minX = -32;$/;"	m	class:F3	access:protected
minX	F4.h	/^	static const int minX = -100;$/;"	m	class:F4	access:protected
minX	F5.h	/^	static const int minX = -5;$/;"	m	class:F5	access:protected
minX	F6.h	/^	static const int minX = -32;$/;"	m	class:F6	access:protected
minX	F7.h	/^	static const int minX = -100;$/;"	m	class:F7	access:protected
minX	F8.h	/^	static const int minX = -100;$/;"	m	class:F8	access:protected
minX	F9.h	/^	static const int minX = -100;$/;"	m	class:F9	access:protected
multiply	Benchmarks.cpp	/^double* Benchmarks::multiply(double*vector, double*matrix,int dim){$/;"	f	class:Benchmarks	signature:(double*vector, double*matrix,int dim)
multiply	Benchmarks.h	/^	double* multiply(double*vector, double*matrix,int dim);$/;"	p	class:Benchmarks	access:protected	signature:(double*vector, double*matrix,int dim)
next	Benchmarks.cpp	/^int Benchmarks::next(int bits) {$/;"	f	class:Benchmarks	signature:(int bits)
next	Benchmarks.h	/^	int next(int bits);$/;"	p	class:Benchmarks	access:protected	signature:(int bits)
nextDouble	Benchmarks.cpp	/^double Benchmarks::nextDouble(){$/;"	f	class:Benchmarks	signature:()
nextDouble	Benchmarks.h	/^	double nextDouble();$/;"	p	class:Benchmarks	access:protected	signature:()
nextGaussian	Benchmarks.cpp	/^double Benchmarks::nextGaussian(){$/;"	f	class:Benchmarks	signature:()
nextGaussian	Benchmarks.h	/^	double nextGaussian();$/;"	p	class:Benchmarks	access:protected	signature:()
nextInt	Benchmarks.cpp	/^int Benchmarks::nextInt(int n) {$/;"	f	class:Benchmarks	signature:(int n)
nextInt	Benchmarks.h	/^	int nextInt(int n);$/;"	p	class:Benchmarks	access:protected	signature:(int n)
nonSeparableGroupSize	Benchmarks.h	/^	int nonSeparableGroupSize;$/;"	m	class:Benchmarks	access:protected
nonSeparableGroupSize	RunParameter.h	/^	int nonSeparableGroupSize;$/;"	m	class:RunParameter	access:public
numOfRun	RunParameter.h	/^	int numOfRun;$/;"	m	class:RunParameter	access:public
rastrigin	Benchmarks.cpp	/^double Benchmarks::rastrigin(double *x, int dim, int k)$/;"	f	class:Benchmarks	signature:(double *x, int dim, int k)
rastrigin	Benchmarks.cpp	/^double Benchmarks::rastrigin(double*x,int dim){$/;"	f	class:Benchmarks	signature:(double*x,int dim)
rastrigin	Benchmarks.h	/^	double rastrigin(double *x, int dim, int k); $/;"	p	class:Benchmarks	access:protected	signature:(double *x, int dim, int k)
rastrigin	Benchmarks.h	/^	double rastrigin(double*x,int dim);$/;"	p	class:Benchmarks	access:protected	signature:(double*x,int dim)
rosenbrock	Benchmarks.cpp	/^double Benchmarks::rosenbrock(double*x,int dim){$/;"	f	class:Benchmarks	signature:(double*x,int dim)
rosenbrock	Benchmarks.cpp	/^double Benchmarks::rosenbrock(double*x,int dim, int k){$/;"	f	class:Benchmarks	signature:(double*x,int dim, int k)
rosenbrock	Benchmarks.h	/^	double rosenbrock(double*x,int dim);$/;"	p	class:Benchmarks	access:protected	signature:(double*x,int dim)
rosenbrock	Benchmarks.h	/^	double rosenbrock(double*x,int dim, int k);$/;"	p	class:Benchmarks	access:protected	signature:(double*x,int dim, int k)
rot_ackley	Benchmarks.cpp	/^double Benchmarks::rot_ackley(double *x,int dim,int k)$/;"	f	class:Benchmarks	signature:(double *x,int dim,int k)
rot_ackley	Benchmarks.cpp	/^double Benchmarks::rot_ackley(double*x,int dim){$/;"	f	class:Benchmarks	signature:(double*x,int dim)
rot_ackley	Benchmarks.h	/^	double rot_ackley(double*x,int dim);$/;"	p	class:Benchmarks	access:protected	signature:(double*x,int dim)
rot_ackley	Benchmarks.h	/^	double rot_ackley(double*x,int dim,int k);$/;"	p	class:Benchmarks	access:protected	signature:(double*x,int dim,int k)
rot_elliptic	Benchmarks.cpp	/^double Benchmarks::rot_elliptic(double*x,int dim){$/;"	f	class:Benchmarks	signature:(double*x,int dim)
rot_elliptic	Benchmarks.cpp	/^double Benchmarks::rot_elliptic(double*x,int dim, int k, double *lookup){$/;"	f	class:Benchmarks	signature:(double*x,int dim, int k, double *lookup)
rot_elliptic	Benchmarks.h	/^	double rot_elliptic(double*x,int dim);$/;"	p	class:Benchmarks	access:protected	signature:(double*x,int dim)
rot_elliptic	Benchmarks.h	/^	double rot_elliptic(double*x,int dim, int k, double *lookup);$/;"	p	class:Benchmarks	access:protected	signature:(double*x,int dim, int k, double *lookup)
rot_rastrigin	Benchmarks.cpp	/^double Benchmarks::rot_rastrigin(double *x,int dim,int k)$/;"	f	class:Benchmarks	signature:(double *x,int dim,int k)
rot_rastrigin	Benchmarks.cpp	/^double Benchmarks::rot_rastrigin(double*x,int dim){$/;"	f	class:Benchmarks	signature:(double*x,int dim)
rot_rastrigin	Benchmarks.h	/^	double rot_rastrigin(double *x,int dim,int k);$/;"	p	class:Benchmarks	access:protected	signature:(double *x,int dim,int k)
rot_rastrigin	Benchmarks.h	/^	double rot_rastrigin(double*x,int dim);$/;"	p	class:Benchmarks	access:protected	signature:(double*x,int dim)
samplingInterval	RunParameter.h	/^	int samplingInterval;$/;"	m	class:RunParameter	access:public
schwefel	Benchmarks.cpp	/^double Benchmarks::schwefel(double*x,int dim){$/;"	f	class:Benchmarks	signature:(double*x,int dim)
schwefel	Benchmarks.cpp	/^double Benchmarks::schwefel(double*x,int dim, int k){$/;"	f	class:Benchmarks	signature:(double*x,int dim, int k)
schwefel	Benchmarks.h	/^	double schwefel(double*x,int dim);$/;"	p	class:Benchmarks	access:protected	signature:(double*x,int dim)
schwefel	Benchmarks.h	/^	double schwefel(double*x,int dim, int k);$/;"	p	class:Benchmarks	access:protected	signature:(double*x,int dim, int k)
setOvectorToZero	Benchmarks.h	/^	bool setOvectorToZero;$/;"	m	class:Benchmarks	access:protected
sphere	Benchmarks.cpp	/^double Benchmarks::sphere(double*x,int dim){$/;"	f	class:Benchmarks	signature:(double*x,int dim)
sphere	Benchmarks.cpp	/^double Benchmarks::sphere(double*x,int dim, int k){$/;"	f	class:Benchmarks	signature:(double*x,int dim, int k)
sphere	Benchmarks.h	/^	double sphere(double*x,int dim);$/;"	p	class:Benchmarks	access:protected	signature:(double*x,int dim)
sphere	Benchmarks.h	/^	double sphere(double*x,int dim, int k);$/;"	p	class:Benchmarks	access:protected	signature:(double*x,int dim, int k)
~Benchmarks	Benchmarks.cpp	/^Benchmarks::~Benchmarks(){$/;"	f	class:Benchmarks	signature:()
~Benchmarks	Benchmarks.h	/^	~Benchmarks();$/;"	p	class:Benchmarks	access:public	signature:()
~F1	F1.cpp	/^F1::~F1(){$/;"	f	class:F1	signature:()
~F1	F1.h	/^	~F1();$/;"	p	class:F1	access:public	signature:()
~F10	F10.cpp	/^F10::~F10(){$/;"	f	class:F10	signature:()
~F10	F10.h	/^	~F10();$/;"	p	class:F10	access:public	signature:()
~F11	F11.cpp	/^F11::~F11(){$/;"	f	class:F11	signature:()
~F11	F11.h	/^	~F11();$/;"	p	class:F11	access:public	signature:()
~F12	F12.cpp	/^F12::~F12(){$/;"	f	class:F12	signature:()
~F12	F12.h	/^	~F12();$/;"	p	class:F12	access:public	signature:()
~F13	F13.cpp	/^F13::~F13(){$/;"	f	class:F13	signature:()
~F13	F13.h	/^	~F13();$/;"	p	class:F13	access:public	signature:()
~F14	F14.cpp	/^F14::~F14(){$/;"	f	class:F14	signature:()
~F14	F14.h	/^	~F14();$/;"	p	class:F14	access:public	signature:()
~F15	F15.cpp	/^F15::~F15(){$/;"	f	class:F15	signature:()
~F15	F15.h	/^	~F15();$/;"	p	class:F15	access:public	signature:()
~F16	F16.cpp	/^F16::~F16(){$/;"	f	class:F16	signature:()
~F16	F16.h	/^	~F16();$/;"	p	class:F16	access:public	signature:()
~F17	F17.cpp	/^F17::~F17(){$/;"	f	class:F17	signature:()
~F17	F17.h	/^	~F17();$/;"	p	class:F17	access:public	signature:()
~F2	F2.cpp	/^F2::~F2(){$/;"	f	class:F2	signature:()
~F2	F2.h	/^	~F2();$/;"	p	class:F2	access:public	signature:()
~F3	F3.cpp	/^F3::~F3(){$/;"	f	class:F3	signature:()
~F3	F3.h	/^	~F3();$/;"	p	class:F3	access:public	signature:()
~F4	F4.cpp	/^F4::~F4(){$/;"	f	class:F4	signature:()
~F4	F4.h	/^	~F4();$/;"	p	class:F4	access:public	signature:()
~F5	F5.cpp	/^F5::~F5(){$/;"	f	class:F5	signature:()
~F5	F5.h	/^	~F5();$/;"	p	class:F5	access:public	signature:()
~F6	F6.cpp	/^F6::~F6(){$/;"	f	class:F6	signature:()
~F6	F6.h	/^	~F6();$/;"	p	class:F6	access:public	signature:()
~F7	F7.cpp	/^F7::~F7(){$/;"	f	class:F7	signature:()
~F7	F7.h	/^	~F7();$/;"	p	class:F7	access:public	signature:()
~F8	F8.cpp	/^F8::~F8(){$/;"	f	class:F8	signature:()
~F8	F8.h	/^	~F8();$/;"	p	class:F8	access:public	signature:()
~F9	F9.cpp	/^F9::~F9(){$/;"	f	class:F9	signature:()
~F9	F9.h	/^	~F9();$/;"	p	class:F9	access:public	signature:()
~RunParameter	RunParameter.cpp	/^RunParameter::~RunParameter() {$/;"	f	class:RunParameter	signature:()
~RunParameter	RunParameter.h	/^	~RunParameter();$/;"	p	class:RunParameter	access:public	signature:()
